{"name":"Brackets-cuwire","tagline":"Brackets plugin for Arduino","body":"<img width=\"40px\" src=\"assets/logo.svg\"> cuwire: IDE for microcontrollers\r\n====================\r\n\r\nThis is a [Brackets](http://brackets.io) plugin, which provides an [Arduino](http://arduino.cc)-like\r\nenvironement for editing, compiling and uploading sketches. Current version supports\r\nArduino 3rd party hardware spec. The plugin was written by Ivan Baktsheev in 2014.\r\n\r\nBrackets is a new generation code editor, based on HTML5 and JS. This plugin will provide same functionality\r\nas Arduino IDE to write code and upload it to the microcontroller. The plugin was written in pure javascript,\r\nand it will probably runs on Windows, Mac OS X, and Linux (untested). A additional libraries like\r\n[serialport](https://github.com/voodootikigod/node-serialport) is used in this plugin,\r\nthe codes are belonging to their own authors. Precompiled versions of those libraries is included along with\r\nplugin distribution.\r\n\r\n## Requirements\r\n#### 1. [Brackets](http://brackets.io)\r\nDeveloped and tested under version 1.0\r\n\r\n#### 2. [Arduino](http://arduino.cc/en/Main/Software)\r\nYou need an Arduino IDE version 1.5 and later\r\n\r\n## Installation\r\nPlease install using plugin manager\r\n\r\nAfter installation, coil icon ![logo](assets/logo.svg) will appear on sidebar\r\n\r\n## Set Arduino Install Location\r\n\r\nArduino default locations for hardware and libraries will be scanned automatically.\r\n\r\n* On Mac OS X `/Applications/Arduino.app`\r\n\r\n* On Windows `C:\\Program Files\\Arduino`\r\n\r\n* User's `Documents/Arduino` directory\r\n\r\nYou can add non-standard Arduino IDE location using preferences.\r\n\r\n## Features\r\n\r\n * Compilation and Upload\r\n * Board images\r\n * Multiple sketches in one project\r\n *\r\n\r\n## TODO\r\n\r\n### Serial Monitor\r\nScan code for a proper baud rate.\r\n\r\n### Settings\r\nSetting custom location for IDE\r\n\r\n### Examples\r\nSearchable examples\r\n\r\n### Libraries\r\nSearch and add libraries without IDE reload\r\n\r\n### IDE features\r\nCode completion, quick edit, compilation errors highlight in code\r\n\r\n### External programmer support\r\n\r\n### Bootloader burn\r\n\r\n### Additional hardware toolchain installation\r\n\r\n## Hardware supported\r\n\r\nThis project based on [Arduino IDE 3rd party hardware specification](https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification).\r\n\r\nCompilation and upload is tested without issues on:\r\n\r\n * Atmel AVR: Arduino Uno, Arduino Mega 2560, Arduino Pro mini clone with USB-UART adapter;\r\n * Atmel ARM: Arduino Due\r\n * Nordic ARM: Rfduino ([HOWTO](https://github.com/apla/brackets-cuwire/wiki/platform:-RFDuino))\r\n\r\n## Issues\r\nIf you meet any problems, you can leave messages at [Issues](https://github.com/apla/brackets-cuwire/issues).\r\n\r\n#### Known Issues:\r\n\r\n###### 1. Build Process\r\n\r\nThe build process is almost similar to [Arduino Build Process](http://arduino.cc/en/Hacking/BuildProcess).\r\nA number of things have to happen for your Arduino code to get onto the Arduino board.\r\nFirst, plugin performs some small transformations to make sure that the code is correct C or C++\r\n(two common programming languages). It then gets passed to a compiler (avr-gcc),\r\nwhich turns the human readable code into machine readable instructions (or object files).\r\nThen, your code gets combined with (linked against), the standard Arduino libraries\r\nthat provide basic functions like digitalWrite() or Serial.print().\r\nThe result is a single hex file, which contains the specific bytes that need to be written\r\nto the program memory of the chip on the Arduino board. This file is then uploaded to the board:\r\ntransmitted over the USB or serial connection via the bootloader already on the chip\r\nor with external programming hardware.\r\n\r\n* Multi-file sketches\r\n\r\nA sketch can contain one `.ino` or `.pde` file and multiple files with extensions of `.c`, `.cpp` and `.h`.\r\nBefore your sketch is compiled, `.ino` or `.pde` file is transformed to form the \"main sketch file\".\r\nFiles with `.c`, `.cpp` or extensions are compiled separately. To use files with a .h extension,\r\nyou need to `#include` it (using \"double quotes\" not angle brackets).\r\n\r\n* Transformations to the main sketch file\r\n\r\nPlugin performs a few transformations to your main sketch file before passing it to the compiler.\r\n\r\nFirst, `#include \"Arduino.h\"` is added just before first program statement. This header file\r\n(found in `<ARDUINO>/hardware/cores/<CORE>/`) includes all the defintions needed for the standard Arduino core.\r\n\r\nNext, plugin searches for function definitions within your main sketch file and creates declarations\r\n(prototypes) for them. These are inserted just after `Arduino.h`. This means that if you want to use\r\na custom type as a function argument, you should declare it within a separate header file.\r\nAlso, this generation isn't perfect: it won't create prototypes for functions that have default argument values,\r\nor which are declared within a namespace or class.\r\n\r\n[Arduino IDE](http://arduino.cc) and [Stino plugin for SublimeText]() works slightly different.\r\nArduino IDE append every file without extension to the main sketch file, Stino does the same for\r\nall files with `.ino` or `.pde` extension. This is bad practice, `cuwire` doesn't support that.\r\nIf you want to build a modular app, please use `.c*` and `.h` files, this behavior is supported in every IDE.\r\n\r\n* Build process\r\n\r\nFirst, plugin reads `boards.txt` and `platform.txt` within `<ARDUINO_APP>/hardware` and `<USER_DOCUMENTS>/Arduino/hardware`\r\nfolders to generate recipes for build and upload.\r\n\r\n###### 2. Add libraries\r\n\r\nCopy the library folder to the `<USER_DOCUMENTS>/Arduino/libraries/` folder.\r\n\r\n###### 3. Add new hardware platforms\r\n\r\nCopy the core folder to the `<USER_DOCUMENTS>/Arduino/hardware/` folder.\r\n\r\n## License\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\r\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\r\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\r\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions\r\nof the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\r\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\r\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\nDEALINGS IN THE SOFTWARE.\r\n\r\n## About The Author\r\n[apla.me](http://apla.me)\r\n\r\n## Website\r\nGitHub (http://github.com/apla/)\r\n\r\nSublime Text Plugin (https://github.com/Robot-Will/Stino)\r\n","google":"UA-59158239-1","note":"Don't delete this file! It's used internally to help with page regeneration."}